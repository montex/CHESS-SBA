/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package DependabilityintermediateModel.provider;

import DependabilityintermediateModel.util.DependabilityintermediateModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DependabilityintermediateModelItemProviderAdapterFactory extends DependabilityintermediateModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DependabilityintermediateModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Sistema} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SistemaItemProvider sistemaItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Sistema}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSistemaAdapter() {
		if (sistemaItemProvider == null) {
			sistemaItemProvider = new SistemaItemProvider(this);
		}

		return sistemaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.InternalFault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalFaultItemProvider internalFaultItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.InternalFault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalFaultAdapter() {
		if (internalFaultItemProvider == null) {
			internalFaultItemProvider = new InternalFaultItemProvider(this);
		}

		return internalFaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ExternalFault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalFaultItemProvider externalFaultItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ExternalFault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalFaultAdapter() {
		if (externalFaultItemProvider == null) {
			externalFaultItemProvider = new ExternalFaultItemProvider(this);
		}

		return externalFaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Error} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorItemProvider errorItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Error}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorAdapter() {
		if (errorItemProvider == null) {
			errorItemProvider = new ErrorItemProvider(this);
		}

		return errorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Exponential} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExponentialItemProvider exponentialItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Exponential}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExponentialAdapter() {
		if (exponentialItemProvider == null) {
			exponentialItemProvider = new ExponentialItemProvider(this);
		}

		return exponentialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Gaussian} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaussianItemProvider gaussianItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Gaussian}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGaussianAdapter() {
		if (gaussianItemProvider == null) {
			gaussianItemProvider = new GaussianItemProvider(this);
		}

		return gaussianItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Deterministic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeterministicItemProvider deterministicItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Deterministic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeterministicAdapter() {
		if (deterministicItemProvider == null) {
			deterministicItemProvider = new DeterministicItemProvider(this);
		}

		return deterministicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Uniform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniformItemProvider uniformItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Uniform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniformAdapter() {
		if (uniformItemProvider == null) {
			uniformItemProvider = new UniformItemProvider(this);
		}

		return uniformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Gamma} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GammaItemProvider gammaItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Gamma}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGammaAdapter() {
		if (gammaItemProvider == null) {
			gammaItemProvider = new GammaItemProvider(this);
		}

		return gammaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.Weibull} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeibullItemProvider weibullItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.Weibull}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeibullAdapter() {
		if (weibullItemProvider == null) {
			weibullItemProvider = new WeibullItemProvider(this);
		}

		return weibullItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.FailureMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailureModeItemProvider failureModeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.FailureMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailureModeAdapter() {
		if (failureModeItemProvider == null) {
			failureModeItemProvider = new FailureModeItemProvider(this);
		}

		return failureModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.FaultsExpressionAndNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultsExpressionAndNodeItemProvider faultsExpressionAndNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.FaultsExpressionAndNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultsExpressionAndNodeAdapter() {
		if (faultsExpressionAndNodeItemProvider == null) {
			faultsExpressionAndNodeItemProvider = new FaultsExpressionAndNodeItemProvider(this);
		}

		return faultsExpressionAndNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.FaultsExpressionOrNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultsExpressionOrNodeItemProvider faultsExpressionOrNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.FaultsExpressionOrNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultsExpressionOrNodeAdapter() {
		if (faultsExpressionOrNodeItemProvider == null) {
			faultsExpressionOrNodeItemProvider = new FaultsExpressionOrNodeItemProvider(this);
		}

		return faultsExpressionOrNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.FaultsExpressionFaultNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultsExpressionFaultNodeItemProvider faultsExpressionFaultNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.FaultsExpressionFaultNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultsExpressionFaultNodeAdapter() {
		if (faultsExpressionFaultNodeItemProvider == null) {
			faultsExpressionFaultNodeItemProvider = new FaultsExpressionFaultNodeItemProvider(this);
		}

		return faultsExpressionFaultNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.FaultsExpressionNotNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultsExpressionNotNodeItemProvider faultsExpressionNotNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.FaultsExpressionNotNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultsExpressionNotNodeAdapter() {
		if (faultsExpressionNotNodeItemProvider == null) {
			faultsExpressionNotNodeItemProvider = new FaultsExpressionNotNodeItemProvider(this);
		}

		return faultsExpressionNotNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ErrorsExpressionErrorNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorsExpressionErrorNodeItemProvider errorsExpressionErrorNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ErrorsExpressionErrorNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorsExpressionErrorNodeAdapter() {
		if (errorsExpressionErrorNodeItemProvider == null) {
			errorsExpressionErrorNodeItemProvider = new ErrorsExpressionErrorNodeItemProvider(this);
		}

		return errorsExpressionErrorNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ErrorsExpressionNotNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorsExpressionNotNodeItemProvider errorsExpressionNotNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ErrorsExpressionNotNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorsExpressionNotNodeAdapter() {
		if (errorsExpressionNotNodeItemProvider == null) {
			errorsExpressionNotNodeItemProvider = new ErrorsExpressionNotNodeItemProvider(this);
		}

		return errorsExpressionNotNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ErrorsExpressionAndNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorsExpressionAndNodeItemProvider errorsExpressionAndNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ErrorsExpressionAndNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorsExpressionAndNodeAdapter() {
		if (errorsExpressionAndNodeItemProvider == null) {
			errorsExpressionAndNodeItemProvider = new ErrorsExpressionAndNodeItemProvider(this);
		}

		return errorsExpressionAndNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ErrorsExpressionOrNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorsExpressionOrNodeItemProvider errorsExpressionOrNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ErrorsExpressionOrNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorsExpressionOrNodeAdapter() {
		if (errorsExpressionOrNodeItemProvider == null) {
			errorsExpressionOrNodeItemProvider = new ErrorsExpressionOrNodeItemProvider(this);
		}

		return errorsExpressionOrNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.FaultsGenerateErrors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultsGenerateErrorsItemProvider faultsGenerateErrorsItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.FaultsGenerateErrors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultsGenerateErrorsAdapter() {
		if (faultsGenerateErrorsItemProvider == null) {
			faultsGenerateErrorsItemProvider = new FaultsGenerateErrorsItemProvider(this);
		}

		return faultsGenerateErrorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.InternalPropagation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalPropagationItemProvider internalPropagationItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.InternalPropagation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalPropagationAdapter() {
		if (internalPropagationItemProvider == null) {
			internalPropagationItemProvider = new InternalPropagationItemProvider(this);
		}

		return internalPropagationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ErrorsPropagation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorsPropagationItemProvider errorsPropagationItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ErrorsPropagation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorsPropagationAdapter() {
		if (errorsPropagationItemProvider == null) {
			errorsPropagationItemProvider = new ErrorsPropagationItemProvider(this);
		}

		return errorsPropagationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ErrorsProduceFailures} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorsProduceFailuresItemProvider errorsProduceFailuresItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ErrorsProduceFailures}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorsProduceFailuresAdapter() {
		if (errorsProduceFailuresItemProvider == null) {
			errorsProduceFailuresItemProvider = new ErrorsProduceFailuresItemProvider(this);
		}

		return errorsProduceFailuresItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.MaintenanceActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaintenanceActivityItemProvider maintenanceActivityItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.MaintenanceActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaintenanceActivityAdapter() {
		if (maintenanceActivityItemProvider == null) {
			maintenanceActivityItemProvider = new MaintenanceActivityItemProvider(this);
		}

		return maintenanceActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.RepairActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepairActivityItemProvider repairActivityItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.RepairActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepairActivityAdapter() {
		if (repairActivityItemProvider == null) {
			repairActivityItemProvider = new RepairActivityItemProvider(this);
		}

		return repairActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ReplaceActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplaceActivityItemProvider replaceActivityItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ReplaceActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplaceActivityAdapter() {
		if (replaceActivityItemProvider == null) {
			replaceActivityItemProvider = new ReplaceActivityItemProvider(this);
		}

		return replaceActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.DetectionActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetectionActivityItemProvider detectionActivityItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.DetectionActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetectionActivityAdapter() {
		if (detectionActivityItemProvider == null) {
			detectionActivityItemProvider = new DetectionActivityItemProvider(this);
		}

		return detectionActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulingConditionExpressionDetectionNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulingConditionExpressionDetectionNodeItemProvider schedulingConditionExpressionDetectionNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulingConditionExpressionDetectionNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulingConditionExpressionDetectionNodeAdapter() {
		if (schedulingConditionExpressionDetectionNodeItemProvider == null) {
			schedulingConditionExpressionDetectionNodeItemProvider = new SchedulingConditionExpressionDetectionNodeItemProvider(this);
		}

		return schedulingConditionExpressionDetectionNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulingConditionExpressionFailedNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulingConditionExpressionFailedNodeItemProvider schedulingConditionExpressionFailedNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulingConditionExpressionFailedNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulingConditionExpressionFailedNodeAdapter() {
		if (schedulingConditionExpressionFailedNodeItemProvider == null) {
			schedulingConditionExpressionFailedNodeItemProvider = new SchedulingConditionExpressionFailedNodeItemProvider(this);
		}

		return schedulingConditionExpressionFailedNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulingConditionExpressionNotNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulingConditionExpressionNotNodeItemProvider schedulingConditionExpressionNotNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulingConditionExpressionNotNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulingConditionExpressionNotNodeAdapter() {
		if (schedulingConditionExpressionNotNodeItemProvider == null) {
			schedulingConditionExpressionNotNodeItemProvider = new SchedulingConditionExpressionNotNodeItemProvider(this);
		}

		return schedulingConditionExpressionNotNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulingConditionExpressionTrueNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulingConditionExpressionTrueNodeItemProvider schedulingConditionExpressionTrueNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulingConditionExpressionTrueNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulingConditionExpressionTrueNodeAdapter() {
		if (schedulingConditionExpressionTrueNodeItemProvider == null) {
			schedulingConditionExpressionTrueNodeItemProvider = new SchedulingConditionExpressionTrueNodeItemProvider(this);
		}

		return schedulingConditionExpressionTrueNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulingConditionExpressionAndNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulingConditionExpressionAndNodeItemProvider schedulingConditionExpressionAndNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulingConditionExpressionAndNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulingConditionExpressionAndNodeAdapter() {
		if (schedulingConditionExpressionAndNodeItemProvider == null) {
			schedulingConditionExpressionAndNodeItemProvider = new SchedulingConditionExpressionAndNodeItemProvider(this);
		}

		return schedulingConditionExpressionAndNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulingConditionExpressionOrNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulingConditionExpressionOrNodeItemProvider schedulingConditionExpressionOrNodeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulingConditionExpressionOrNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulingConditionExpressionOrNodeAdapter() {
		if (schedulingConditionExpressionOrNodeItemProvider == null) {
			schedulingConditionExpressionOrNodeItemProvider = new SchedulingConditionExpressionOrNodeItemProvider(this);
		}

		return schedulingConditionExpressionOrNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ScheduleImmediately} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleImmediatelyItemProvider scheduleImmediatelyItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ScheduleImmediately}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleImmediatelyAdapter() {
		if (scheduleImmediatelyItemProvider == null) {
			scheduleImmediatelyItemProvider = new ScheduleImmediatelyItemProvider(this);
		}

		return scheduleImmediatelyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.ScheduleAtTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduleAtTimeItemProvider scheduleAtTimeItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.ScheduleAtTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduleAtTimeAdapter() {
		if (scheduleAtTimeItemProvider == null) {
			scheduleAtTimeItemProvider = new ScheduleAtTimeItemProvider(this);
		}

		return scheduleAtTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DependabilityintermediateModel.SchedulePeriodic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulePeriodicItemProvider schedulePeriodicItemProvider;

	/**
	 * This creates an adapter for a {@link DependabilityintermediateModel.SchedulePeriodic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulePeriodicAdapter() {
		if (schedulePeriodicItemProvider == null) {
			schedulePeriodicItemProvider = new SchedulePeriodicItemProvider(this);
		}

		return schedulePeriodicItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sistemaItemProvider != null) sistemaItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (internalFaultItemProvider != null) internalFaultItemProvider.dispose();
		if (externalFaultItemProvider != null) externalFaultItemProvider.dispose();
		if (errorItemProvider != null) errorItemProvider.dispose();
		if (exponentialItemProvider != null) exponentialItemProvider.dispose();
		if (gaussianItemProvider != null) gaussianItemProvider.dispose();
		if (deterministicItemProvider != null) deterministicItemProvider.dispose();
		if (uniformItemProvider != null) uniformItemProvider.dispose();
		if (gammaItemProvider != null) gammaItemProvider.dispose();
		if (weibullItemProvider != null) weibullItemProvider.dispose();
		if (failureModeItemProvider != null) failureModeItemProvider.dispose();
		if (faultsExpressionAndNodeItemProvider != null) faultsExpressionAndNodeItemProvider.dispose();
		if (faultsExpressionOrNodeItemProvider != null) faultsExpressionOrNodeItemProvider.dispose();
		if (faultsExpressionFaultNodeItemProvider != null) faultsExpressionFaultNodeItemProvider.dispose();
		if (faultsExpressionNotNodeItemProvider != null) faultsExpressionNotNodeItemProvider.dispose();
		if (errorsExpressionErrorNodeItemProvider != null) errorsExpressionErrorNodeItemProvider.dispose();
		if (errorsExpressionNotNodeItemProvider != null) errorsExpressionNotNodeItemProvider.dispose();
		if (errorsExpressionAndNodeItemProvider != null) errorsExpressionAndNodeItemProvider.dispose();
		if (errorsExpressionOrNodeItemProvider != null) errorsExpressionOrNodeItemProvider.dispose();
		if (faultsGenerateErrorsItemProvider != null) faultsGenerateErrorsItemProvider.dispose();
		if (internalPropagationItemProvider != null) internalPropagationItemProvider.dispose();
		if (errorsPropagationItemProvider != null) errorsPropagationItemProvider.dispose();
		if (errorsProduceFailuresItemProvider != null) errorsProduceFailuresItemProvider.dispose();
		if (maintenanceActivityItemProvider != null) maintenanceActivityItemProvider.dispose();
		if (repairActivityItemProvider != null) repairActivityItemProvider.dispose();
		if (replaceActivityItemProvider != null) replaceActivityItemProvider.dispose();
		if (detectionActivityItemProvider != null) detectionActivityItemProvider.dispose();
		if (schedulingConditionExpressionDetectionNodeItemProvider != null) schedulingConditionExpressionDetectionNodeItemProvider.dispose();
		if (schedulingConditionExpressionFailedNodeItemProvider != null) schedulingConditionExpressionFailedNodeItemProvider.dispose();
		if (schedulingConditionExpressionNotNodeItemProvider != null) schedulingConditionExpressionNotNodeItemProvider.dispose();
		if (schedulingConditionExpressionTrueNodeItemProvider != null) schedulingConditionExpressionTrueNodeItemProvider.dispose();
		if (schedulingConditionExpressionAndNodeItemProvider != null) schedulingConditionExpressionAndNodeItemProvider.dispose();
		if (schedulingConditionExpressionOrNodeItemProvider != null) schedulingConditionExpressionOrNodeItemProvider.dispose();
		if (scheduleImmediatelyItemProvider != null) scheduleImmediatelyItemProvider.dispose();
		if (scheduleAtTimeItemProvider != null) scheduleAtTimeItemProvider.dispose();
		if (schedulePeriodicItemProvider != null) schedulePeriodicItemProvider.dispose();
	}

}
