-- @name		PetriNet
-- @version		1.0
-- @domains		Petri net
-- @authors		Pierrick Guyard (pielepsy@gmail.com)
-- @date		2005/06/29
-- @description		This basic metamodel describes Petri Net. It's consists of places, transitions and directed arcs that connect them, so arcs run between places and transitions, not between places and places or transitions and transitions.  There is two sorts of arcs : the ones which connect places with transitions, and the other start at a transition and end at a place.


package PetriNet {

	abstract class LocatedElement {
		attribute location : String;
	}
	
	abstract class NamedElement extends LocatedElement {
		attribute name : String;
	}

	-- @comment top element
	class PetriNet extends NamedElement {
		reference elements[*] container : Element oppositeOf net;
		reference arcs[*] container : Arc oppositeOf net;
	}
	
	-- @begin elements
	
	abstract class Element extends NamedElement {
		reference net : PetriNet oppositeOf elements;
	}
	
	class Place extends Element {
		reference incomingArc[*] : TransitionToPlace oppositeOf to;
		reference outgoingArc[*] : PlaceToTransition oppositeOf from;
	}
	
	class Transition extends Element {
		reference incomingArc[1-*] : PlaceToTransition oppositeOf to;
		reference outgoingArc[1-*] :  TransitionToPlace oppositeOf from;	
	}
	
	-- @end elements
	
	
	--@begin arcs

	abstract class Arc extends NamedElement {
		attribute weight : Integer;
		reference net : PetriNet oppositeOf arcs;	
	}
	
	class PlaceToTransition extends Arc {
		reference from : Place oppositeOf outgoingArc;
		reference to : Transition oppositeOf incomingArc;
	}
	
	class TransitionToPlace extends Arc {
		reference from : Transition oppositeOf outgoingArc;
		reference to : Place oppositeOf incomingArc;
	}
	
	--@end arcs

}

package PrimitiveTypes {
	datatype String;
	datatype Integer;
}