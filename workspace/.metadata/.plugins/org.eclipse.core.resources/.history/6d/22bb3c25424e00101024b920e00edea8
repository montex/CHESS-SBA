/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package DependabilityintermediateModel.impl;

import DependabilityintermediateModel.DependabilityintermediateModelPackage;
import DependabilityintermediateModel.Distribution;
import DependabilityintermediateModel.InternalFault;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Internal Fault</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link DependabilityintermediateModel.impl.InternalFaultImpl#getOccurrence <em>Occurrence</em>}</li>
 *   <li>{@link DependabilityintermediateModel.impl.InternalFaultImpl#getPermanenceProbability <em>Permanence Probability</em>}</li>
 *   <li>{@link DependabilityintermediateModel.impl.InternalFaultImpl#getTransientTime <em>Transient Time</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class InternalFaultImpl extends FaultImpl implements InternalFault {
	/**
	 * The cached value of the '{@link #getOccurrence() <em>Occurrence</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOccurrence()
	 * @generated
	 * @ordered
	 */
	protected Distribution occurrence;

	/**
	 * The default value of the '{@link #getPermanenceProbability() <em>Permanence Probability</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPermanenceProbability()
	 * @generated
	 * @ordered
	 */
	protected static final double PERMANENCE_PROBABILITY_EDEFAULT = 0.0;

	/**
	 * The cached value of the '{@link #getPermanenceProbability() <em>Permanence Probability</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPermanenceProbability()
	 * @generated
	 * @ordered
	 */
	protected double permanenceProbability = PERMANENCE_PROBABILITY_EDEFAULT;

	/**
	 * The cached value of the '{@link #getTransientTime() <em>Transient Time</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTransientTime()
	 * @generated
	 * @ordered
	 */
	protected Distribution transientTime;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalFaultImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return DependabilityintermediateModelPackage.Literals.INTERNAL_FAULT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Distribution getOccurrence() {
		return occurrence;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetOccurrence(Distribution newOccurrence, NotificationChain msgs) {
		Distribution oldOccurrence = occurrence;
		occurrence = newOccurrence;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE, oldOccurrence, newOccurrence);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOccurrence(Distribution newOccurrence) {
		if (newOccurrence != occurrence) {
			NotificationChain msgs = null;
			if (occurrence != null)
				msgs = ((InternalEObject)occurrence).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE, null, msgs);
			if (newOccurrence != null)
				msgs = ((InternalEObject)newOccurrence).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE, null, msgs);
			msgs = basicSetOccurrence(newOccurrence, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE, newOccurrence, newOccurrence));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPermanenceProbability() {
		return permanenceProbability;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPermanenceProbability(double newPermanenceProbability) {
		double oldPermanenceProbability = permanenceProbability;
		permanenceProbability = newPermanenceProbability;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DependabilityintermediateModelPackage.INTERNAL_FAULT__PERMANENCE_PROBABILITY, oldPermanenceProbability, permanenceProbability));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Distribution getTransientTime() {
		return transientTime;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetTransientTime(Distribution newTransientTime, NotificationChain msgs) {
		Distribution oldTransientTime = transientTime;
		transientTime = newTransientTime;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME, oldTransientTime, newTransientTime);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTransientTime(Distribution newTransientTime) {
		if (newTransientTime != transientTime) {
			NotificationChain msgs = null;
			if (transientTime != null)
				msgs = ((InternalEObject)transientTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME, null, msgs);
			if (newTransientTime != null)
				msgs = ((InternalEObject)newTransientTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME, null, msgs);
			msgs = basicSetTransientTime(newTransientTime, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME, newTransientTime, newTransientTime));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE:
				return basicSetOccurrence(null, msgs);
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME:
				return basicSetTransientTime(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE:
				return getOccurrence();
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__PERMANENCE_PROBABILITY:
				return getPermanenceProbability();
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME:
				return getTransientTime();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE:
				setOccurrence((Distribution)newValue);
				return;
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__PERMANENCE_PROBABILITY:
				setPermanenceProbability((Double)newValue);
				return;
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME:
				setTransientTime((Distribution)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE:
				setOccurrence((Distribution)null);
				return;
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__PERMANENCE_PROBABILITY:
				setPermanenceProbability(PERMANENCE_PROBABILITY_EDEFAULT);
				return;
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME:
				setTransientTime((Distribution)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__OCCURRENCE:
				return occurrence != null;
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__PERMANENCE_PROBABILITY:
				return permanenceProbability != PERMANENCE_PROBABILITY_EDEFAULT;
			case DependabilityintermediateModelPackage.INTERNAL_FAULT__TRANSIENT_TIME:
				return transientTime != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (PermanenceProbability: ");
		result.append(permanenceProbability);
		result.append(')');
		return result.toString();
	}

} //InternalFaultImpl
