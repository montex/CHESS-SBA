-- @path GSPN=CHESSReviewDemo/metamodels/placeTransition.ecore
-- @path DEEM=CHESSReviewDemo/metamodels/deem.ecore

module pnml2deem;

create out1: DEEM from in1: GSPN;

helper def: placeCounter : Integer = 0;
helper def: transitionCounter : Integer = 0;

helper def: idToString(p:GSPN!PnObject): String =
	if (p = OclUndefined) then
		'undefObject'
	else
		if (p.id = OclUndefined) then
			'undef'
		else
			p.id
		endif
	endif;

helper def: arcToString(p:GSPN!Arc): String =
	'from '+thisModule.idToString(p.source)+' to '+thisModule.idToString(p.target);

rule Net {
	from
		page: GSPN!Page
	using {
		net: GSPN!PetriNet = page.containerPetriNet;
	}
	to
		deemNet : DEEM!Net (
			Name <- net.name			
		)
}

rule Places {
	from
		place : GSPN!Place
	using { 
		markup : GSPN!PTMarking = place.initialMarking;
		name : GSPN!Name = place.name;
	}
	to
		deemPlace : DEEM!Place (
			Name <- name.text+thisModule.placeCounter.toString(),
--			descrizione <- 'X'+thisModule.idToString(place),
			marking <- markup.text,
			net <- place.containerPage
		)
	do {
		thisModule.placeCounter <- thisModule.placeCounter+1; 
	}
}

rule ImmediateTransitions {
	from
		transition : GSPN!GSPNImmediateTransition
	to
		deemImmediateTransition : DEEM!ImmediateTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
--			Weight <- transition.Weight,
			Priority <- transition.Priority,
			params <- Sequence{transition.Probability},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule ExponentialTransitions {
	from
		transition : GSPN!GSPNTimedTransition
		(
			transition.Distribution.oclIsTypeOf(GSPN!Exponential)
		)
	using {
		distribution : GSPN!Exponential = transition.Distribution; 
	}
	to
		deemTimedTransition : DEEM!TimedTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
			type <- #Exponential,
			params <- Sequence{distribution.Rate},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule GaussianTransitions {
	from
		transition : GSPN!GSPNTimedTransition
		(
			transition.Distribution.oclIsTypeOf(GSPN!Gaussian)
		)
	using {
		distribution : GSPN!Gaussian = transition.Distribution; 
	}
	to
		deemTimedTransition : DEEM!TimedTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
			type <- #Normal,
			params <- Sequence{distribution.Mean, distribution.Variance},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule DeterministicTransitions {
	from
		transition : GSPN!GSPNTimedTransition
		(
			transition.Distribution.oclIsTypeOf(GSPN!Deterministic)
		)
	using {
		distribution : GSPN!Deterministic = transition.Distribution; 
	}
	to
		deemTimedTransition : DEEM!TimedTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
			type <- #Deterministic,
			params <- Sequence{distribution.Value},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule UniformTransitions {
	from
		transition : GSPN!GSPNTimedTransition
		(
			transition.Distribution.oclIsTypeOf(GSPN!Uniform)
		)
	using {
		distribution : GSPN!Uniform = transition.Distribution; 
	}
	to
		deemTimedTransition : DEEM!TimedTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
			type <- #Uniform,
			params <- Sequence{distribution.Lower, distribution.Upper},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule WeibullTransitions {
	from
		transition : GSPN!GSPNTimedTransition
		(
			transition.Distribution.oclIsTypeOf(GSPN!Weibull)
		)
	using {
		distribution : GSPN!Weibull = transition.Distribution; 
	}
	to
		deemTimedTransition : DEEM!TimedTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
			type <- #Weibull,
			params <- Sequence{distribution.Alpha, distribution.Beta},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule GammaTransitions {
	from
		transition : GSPN!GSPNTimedTransition
		(
			transition.Distribution.oclIsTypeOf(GSPN!Gamma)
		)
	using {
		distribution : GSPN!Gamma = transition.Distribution; 
	}
	to
		deemTimedTransition : DEEM!TimedTransition (
			Name <- 'T'+thisModule.transitionCounter.toString(),
--			descrizione <- thisModule.idToString(transition),
			type <- #Gamma,
			params <- Sequence{distribution.Alpha, distribution.Beta},
			net <- transition.containerPage
		)
	do {
		thisModule.transitionCounter <- thisModule.transitionCounter+1; 
	}
}

rule InputArcs {
	from
		arc : GSPN!GSPNArc,
		transition : GSPN!GSPNTransition
		(
			arc.target = transition and
			arc.type = #normal
		)
	to
		inputArc : DEEM!InputArc (
			source <- arc.source,
			target <- arc.target,
			type <- #Normal,
--			descrizione <- thisModule.arcToString(arc),
			net <- arc.containerPage
		)
}

rule InhibitorInputArcs {
	from
		arc : GSPN!GSPNArc,
		transition : GSPN!GSPNTransition
		(
			arc.target = transition and
			arc.type = #inhibitor
		)
	to
		inputArc : DEEM!InputArc (
			source <- arc.source,
			target <- arc.target,
			type <- #Inhibitor,
--			descrizione <- thisModule.arcToString(arc),
			net <- arc.containerPage
		)
}

rule OutputArcs {
	from
		arc : GSPN!GSPNArc,
		transition : GSPN!GSPNTransition
		(
			arc.source = transition
		)
	to
		outputArc : DEEM!OutputArc (
			source <- arc.source,
			target <- arc.target,
--			descrizione <- thisModule.arcToString(arc),
			net <- arc.containerPage
		)
}

