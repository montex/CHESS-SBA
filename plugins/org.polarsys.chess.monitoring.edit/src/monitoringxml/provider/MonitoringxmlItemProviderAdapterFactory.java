/**
 */
package monitoringxml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.polarsys.chess.monitoring.monitoringxml.util.MonitoringxmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MonitoringxmlItemProviderAdapterFactory extends MonitoringxmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MonitoringxmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.Monitoring} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitoringItemProvider monitoringItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.Monitoring}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitoringAdapter() {
		if (monitoringItemProvider == null) {
			monitoringItemProvider = new MonitoringItemProvider(this);
		}

		return monitoringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.Thread} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThreadItemProvider threadItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.Thread}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThreadAdapter() {
		if (threadItemProvider == null) {
			threadItemProvider = new ThreadItemProvider(this);
		}

		return threadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.Period} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PeriodItemProvider periodItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.Period}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPeriodAdapter() {
		if (periodItemProvider == null) {
			periodItemProvider = new PeriodItemProvider(this);
		}

		return periodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.ExecutionTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionTimeItemProvider executionTimeItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.ExecutionTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionTimeAdapter() {
		if (executionTimeItemProvider == null) {
			executionTimeItemProvider = new ExecutionTimeItemProvider(this);
		}

		return executionTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.BlockingTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockingTimeItemProvider blockingTimeItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.BlockingTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockingTimeAdapter() {
		if (blockingTimeItemProvider == null) {
			blockingTimeItemProvider = new BlockingTimeItemProvider(this);
		}

		return blockingTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.ResponseTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseTimeItemProvider responseTimeItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.ResponseTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseTimeAdapter() {
		if (responseTimeItemProvider == null) {
			responseTimeItemProvider = new ResponseTimeItemProvider(this);
		}

		return responseTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.AnalysisContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisContextItemProvider analysisContextItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.AnalysisContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisContextAdapter() {
		if (analysisContextItemProvider == null) {
			analysisContextItemProvider = new AnalysisContextItemProvider(this);
		}

		return analysisContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.monitoring.monitoringxml.MeasuredValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasuredValueItemProvider measuredValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.monitoring.monitoringxml.MeasuredValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasuredValueAdapter() {
		if (measuredValueItemProvider == null) {
			measuredValueItemProvider = new MeasuredValueItemProvider(this);
		}

		return measuredValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (monitoringItemProvider != null) monitoringItemProvider.dispose();
		if (threadItemProvider != null) threadItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (periodItemProvider != null) periodItemProvider.dispose();
		if (executionTimeItemProvider != null) executionTimeItemProvider.dispose();
		if (blockingTimeItemProvider != null) blockingTimeItemProvider.dispose();
		if (responseTimeItemProvider != null) responseTimeItemProvider.dispose();
		if (analysisContextItemProvider != null) analysisContextItemProvider.dispose();
		if (measuredValueItemProvider != null) measuredValueItemProvider.dispose();
	}

}
